#compdef _prosv5 prosv5
# (c) Khue Nguyen <Z5483Y@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

(( $+functions[_list_backends] )) ||
_list_backends() {
	local -a _backends
	_backends=('share' 'solo')
	_describe "backend" _backends
}

(( $+functions[_list_log_level] )) ||
_list_log_level() {
	local -a _levels
	_levels=(
		'DEBUG'
		'INFO'
		'WARNING'
		'ERROR'
		'CRITICAL'
	)
	_describe "level" _levels
}

(( $+functions[_list_icons] )) ||
_list_icons() {
	local -a _icons
	_icons=(
		'USER000x.bmp:VCS'
		'USER001x.bmp:Cool Looking X'
		'USER003x.bmp:Slice of Pizza'
		'USER010x.bmp:Clawbot'
		'USER011x.bmp:Robot Head'
		'USER012x.bmp:Power Icon'
		'USER013x.bmp:Planet with Moons'
		'USER027x.bmp:Alien'
		'USER029x.bmp:UFO'
		'USER901x.bmp:MATLAB'
		'USER902x.bmp:PROS'
		'USER903x.bmp:Robot Mesh Studio (ver 1)'
		'USER910x.bmp:Robot Mesh Studio (ver 2)'
		'USER911x.bmp:Robot Mesh Studio C++'
		'USER912x.bmp:Robot Mesh Studio Blockly'
		'USER913x.bmp:Robot Mesh Studio Flowol'
		'USER914x.bmp:Robot Mesh Studio JavaScript'
		'USER915x.bmp:Robot Mesh Studio Python'
		'USER920x.bmp:Default File (ver 1)'
		'USER921x.bmp:VexCode'
		'USER922x.bmp:VexCode Blocks'
		'USER923x.bmp:Default File (ver 2)'
		'USER924x.bmp:Default File (ver 3)'
		'USER925x.bmp:VexCode Python'
		'USER926x.bmp:VexCode C++'
		'USER999x.bmp:Default File (ver 4)'
	)
	_describe "icon" _icons
}

(( $+functions[_list_targets] )) ||
_list_targets() {
	local -a _targets
	_targets=('v5' 'cortex')
	_describe "target" _targets
}

(( $+functions[_list_templates] )) ||
_list_templates() {
	local -a _list_templates
	_templates=($(ls -1 $XDG_CONFIG_HOME/pros/templates))
	_describe "template" _templates
}

_prosv5() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--version[Display version and exits]' \
		'--help[Show help message and exit]' \
		"1: :->commands" \
		"*::arg:->args"

	local -a _cmds
	case "$state" in
	commands)
		_cmds=(
			'conductor:Perform project management for PROS'
			'lsusb:List plugged in VEX Devices'
			'make:Build current PROS project or cwd'
			'terminal:Open a terminal to a serial port'
			'test'
			'upgrade:Check for updates to the PROS CLI'
			'upload:Upload a binary to a microcontroller.'
			'v5:Utilities for managing the VEX V5'
		)
		_describe "command" _cmds
		;;
	esac

	case "$words[1]" in
	conductor)
		_prosv5_conductor ;;
	lsusb)
		_prosv5_lsusb ;;
	make)
		_prosv5_make ;;
	terminal)
		_prosv5_terminal ;;
	test)
		_prosv5_test ;;
	upgrade)
		_prosv5_upgrade ;;
	upload)
		_prosv5_upload ;;
	v5)
		_prosv5_v5 ;;
	esac
}

(( $+functions[_prosv5_conductor] )) ||
_prosv5_conductor() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->commands" \
		"*::arg:->args"

	local -a _conductor_cmds
	case "$state" in
	commands)
		_conductor_cmds=(
			'apply:Upgrade or install a template'
			'create-template:Create a template to be used in other'
			'fetch:Fetch/Download a remote template'
			'info-project:Display information about a PROS project'
			'install:Install a library into a PROS project'
			'new-project:Create a new PROS project'
			'purge-template:Purge template(s) from the local cache'
			'query-templates:Query local and remote templates'
			'uninstall:Uninstall a template from a PROS project'
			'upgrade:Upgrade a PROS project'
		)
		_describe "conductor command" _conductor_cmds
		;;
	esac

	case "$words[1]" in
	apply)
		_prosv5_conductor_apply ;;
	create-template)
		_prosv5_conductor_create_template ;;
	fetch)
		_prosv5_conductor_fetch ;;
	info-project)
		_prosv5_conductor_info_project ;;
	install)
		_prosv5_conductor_install ;;
	new-project)
		_prosv5_conductor_new_project ;;
	purge-template)
		_prosv5_conductor_purge_template ;;
	query-templates)
		_prosv5_conductor_query_templates ;;
	uninstall)
		_prosv5_conductor_uninstall ;;
	upgrade)
		_prosv5_conductor_upgrade ;;
	esac
}

(( $+functions[_prosv5_conductor_apply] )) ||
_prosv5_conductor_apply() {
	_arguments -C \
		'--upgrade[Allow upgrading templates in a project]' \
		'--no--upgrade[Forbid upgrading templates in a project]' \
		'--install[Allow installing templates in a project]' \
		'--no-install[Forbid installing templates in a project]' \
		'--download[Allow downloading templates]' \
		'--no-download[Forbid downloading templates]' \
		'--upgrade-user-files[Replace all user files in a template]' \
		'--no-upgrade-user-files[Do not replace all user files in a template]' \
		'--force[Force all system files to be inserted into the project]' \
		'--force-apply[Force apply the template]' \
		'--remove-empty-dirs[Remove empty directories when removing files]' \
		'--no-remove-empty-dirs[Do not remove empty directories when removing files]' \
		'--project[PROS Project directory or file]:project:_files' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->templates" \
		"*::arg:->args"

	case "$state" in
	templates)
		_list_templates ;;
	esac
}

(( $+functions[_prosv5_conductor_create_template] )) ||
_prosv5_conductor_create_template() {
	_arguments -C \
		'--system[Specify system files required by the template]:file:_files' \
		'--user[Specify files that are intended to be modified by users]:file:_files' \
		'--kernels[Specify supported kernels]:version' \
		'--targets[Specify the target platform]:platform:_list_targets' \
		'--destination[Specify an alternate destination for the created ZIP file or template descriptor]:destination:_files' \
		'--zip[Create a ZIP file or create a template descriptor]' \
		'--no-zip[Do not create a ZIP file or create a template descriptor]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->directories" \
		"2: :->versions" \
		"*::arg:->args"
	
	case "$state" in
	directories)
		_directories ;;
	versions)
		_message 'version';;
	esac
}

(( $+functions[_prosv5_conductor_fetch] )) ||
_prosv5_conductor_fetch() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->files" \
		"*::arg:->args"

	case "$state" in
	files)
		_files ;;
	esac
}

(( $+functions[_prosv5_conductor_info_project] )) ||
_prosv5_conductor_info_project() {
	_arguments \
		'--ls-upgrades' \
		'--no-ls-upgrades' \
		'--project[PROS Project directory or file]:directory:_directories' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_conductor_install] )) ||
_prosv5_conductor_install() {
	_arguments -C \
		{--upgrade,--no-upgrade} \
		{--download,--no-download} \
		'--force-user[Replace all user files in a template]' \
		{-f,--force-system}'[Force all system files to be inserted into the project]' \
		'--force-apply[Force apply the template]' \
		'--remove-empty-dirs[Remove empty directories when removing files]' \
		'--no-remove-empty-dirs[Do not remove empty directories when removing files]' \
		'--project[PROS Project directory or file]:directory:_directories' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->templates" \
		"*::arg:->args"

	case "$state" in
	templates)
		_list_templates ;;
	esac
}

(( $+functions[_prosv5_conductor_new_project] )) ||
_prosv5_conductor_new_project() {
	_arguments -C \
		'--force-user[Replace all user files in a template]' \
		{-f,--force-system}'[Force all system files to be inserted into the project]' \
		'--force-refresh[Force update all remote depos]' \
		'--no-default-libs[Do not intsall any default libraries]' \
		'--compile-after[Compile the project after creation]' \
		'--build-cache[Build compile commands cache after creation]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->paths" \
		"2: :->targets" \
		"3: :->versions" \
		"*::arg:->args"

	case "$state" in
	paths)
		_directories ;;
	targets)
		_list_targets ;;
	versions)
		_message 'version' ;;
	esac
}

(( $+functions[_prosv5_conductor_purge_template] )) ||
_prosv5_conductor_purge_template() {
	_arguments -C \
		{-f,--force}'[Do not prompt for removal of multiple templates]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->templates" \
		"*::arg:->args"

	case "$state" in
	templates)
		_list_templates ;;
	esac
}

(( $+functions[_prosv5_conductor_query_template] )) ||
_prosv5_conductor_query_templates() {
	_arguments \
		'--allow-offline[Allow offline template in the listing]' \
		'--no-offline[Disallow offline template in the listing]' \
		'--allow-onling[Allow onling template in the listing]' \
		'--no-onling[Disallow onling template in the listing]' \
		'--force-refresh[Force update all remote depos]' \
		'--limit[Limit displayed results]:integer' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
}

(( $+functions[_prosv5_conductor_uninstall] )) ||
_prosv5_conductor_uninstall() {
	_arguments -C \
		'--remove-user[Also remove user files]' \
		'--remove-empty-dirs[Remove empty directories when removing files]' \
		'--no-remove-empty-dirs[Do not remove empty directories when removing files]' \
		'--project[PROS Project directory or file]:project:_files' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->templates" \
		"*::arg:->args"

	case "$state" in
	templates)
		_list_templates ;;
	esac
}

(( $+functions[_prosv5_conductor_upgrade] )) ||
_prosv5_conductor_upgrade() {
	_arguments -C \
		'--install[Allow installing templates in a project]' \
		'--no-install[Forbid installing templates in a project]' \
		'--download[Allow downloading templates]' \
		'--no-download[Forbid downloading templates]' \
		'--force-user[Replace all user files in a template]' \
		{-f,--force}'[Force all system files to be inserted into the project]' \
		'--force-apply[Force apply the template]' \
		'--remove-empty-dirs[Remove empty directories when removing files]' \
		'--no-remove-empty-dirs[Do not remove empty directories when removing files]' \
		'--project[PROS Project directory or file]:project:_files' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->templates" \
		"*::arg:->args"

	case "$state" in
	templates)
		_list_templates ;;
	esac
}

(( $+functions[_prosv5_lsusb] )) ||
_prosv5_lsusb() {
	_arguments \
		'--target:target:_list_targets' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_make] )) ||
_prosv5_make() {
	_arguments \
		'--project[PROS Project directory or file]:project:_files' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_terminal] )) ||
_prosv5_terminal() {
	_arguments \
		'--backend[Backend port of the terminal]:backends:_list_backends' \
		'--raw[Do not process the data]' \
		'--hex[Display data as hexadecimal values. Unaffected by --raw]' \
		'--ports[Specify 2 ports for the "share" backend. The default option deterministically selects ports based on the serial port name]' \
		'--banner[Display banner]' \
		'--no-banner[Do not display banner]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_upgrade] )) ||
_prosv5_upgrade() {
	_arguments \
		'--force-check[Force check for updates, disregarding auto-check frequency]' \
		'--no-install[Only check if a new version is available, do not attempt to]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_upload] )) ||
_prosv5_upload() {
	_arguments \
		'--target[Specify the target microcontroller]:target:_list_targets' \
		'--project[PROS Project directory or file]:project:_files' \
		'--run-after[Immediately run the uploaded program]' \
		'--no-run-after[Do not immediately run the uploaded program]' \
		{-q,--quirk}':Specify an integer' \
		'--name[Remote program name]:name' \
		'--slot[Program slot on the GUI]:slot' \
		'--run-screen[Open "run program" screen after uploading]' \
		'--execute[Execute program after uploading]' \
		'--compress-bin[Compress the program binary before uploading]' \
		'--no-compress-bin[Do not compress the program binary before uploading]' \
		'--icon[Program icon on the GUI]:icon:_list_icons' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]'
}

(( $+functions[_prosv5_v5] )) ||
_prosv5_v5() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->commands" \
		"*::arg:->args"

	local -a _v5_cmds
	case "$state" in
	commands)
		_v5_cmds=(
			'capture:Take a screen capture of the display'
			'cat-metadata:Print metadata for a file'
			'ls-files:List files on the flash filesystem'
			'rm-all:Remove all user programs from the V5'
			'rm-file:Remove a file from the flash filesystem'
			'run:Run a V5 Program'
			'status:Print system information for the V5'
			'stop:Stop a V5 Program'
		)
		_describe "v5 commands" _v5_cmds
		;;
	esac

	case "$words[1]" in
	capture)
		_prosv5_v5_capture ;;
	cat-metadata)
		_prosv5_v5_cat_metadata ;;
	ls-files)
		_prosv5_v5_ls_files ;;
	rm-all)
		_prosv5_v5_rm_all ;;
	rm-file)
		_prosv5_v5_rm_file ;;
	run)
		_prosv5_v5_run ;;
	stop)
		_prosv5_v5_stop ;;
	status)
		_prosv5_v5_status ;;
	esac
}

(( $+functions[_prosv5_v5_capture] )) ||
_prosv5_v5_capture() {
	_arguments -C \
		'--force' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->filename" \
		"2: :->port" \
		"*::arg:->args"

	case "$state" in
	filename)
		_files ;;
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_cat_metadata] )) ||
_prosv5_v5_cat_metadata() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->filename" \
		"2: :->port" \
		"*::arg:->args"

	case "$state" in
	filename)
		_files ;;
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_ls_files] )) ||
_prosv5_v5_ls_files() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->filename" \
		"2: :->port" \
		"*::arg:->args"

	case "$state" in
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_rm_all] )) ||
_prosv5_v5_rm_all() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->port" \
		"*::arg:->args"

	case "$state" in
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_rm_file] )) ||
_prosv5_v5_rm_file() {
	_arguments -C \
		'--erase-all[Erase all files matching base name]' \
		'--erase-only[Only file matching base name]' \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->filename" \
		"2: :->port" \
		"*::arg:->args"

	case "$state" in
	filename)
		_files ;;
	port)
		_message 'port' ;;
	esac
}


(( $+functions[_prosv5_v5_run] )) ||
_prosv5_v5_run() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->slot" \
		"2: :->port" \
		"*::arg:->args"

	case "$state" in
	slot)
		_message 'slot' ;;
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_stop] )) ||
_prosv5_v5_stop() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->port" \
		"*::arg:->args"

	case "$state" in
	port)
		_message 'port' ;;
	esac
}

(( $+functions[_prosv5_v5_status] )) ||
_prosv5_v5_status() {
	_arguments -C \
		'--debug[Enable debugging output]' \
		{-l,--log}'[Specify log level]:level:_list_log_level' \
		'--logfile[Log message to a file]:file:_files' \
		'--verbose[Enable verbose output]' \
		'--help[Show help message and exit]' \
		"1: :->port" \
		"*::arg:->args"

	case "$state" in
	port)
		_message 'port' ;;
	esac
}
